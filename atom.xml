<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KinWah&#39;s Blog</title>
  <subtitle>「 记录指尖，敲击之美 」</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KinWah.top/"/>
  <updated>2017-10-18T15:55:19.000Z</updated>
  <id>http://KinWah.top/</id>
  
  <author>
    <name>KinWah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://KinWah.top//blog/JS%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://KinWah.top//blog/JS面试题详解.html</id>
    <published>2017-09-12T16:31:17.000Z</published>
    <updated>2017-10-18T15:55:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS面试题详解"><a href="#JS面试题详解" class="headerlink" title="JS面试题详解"></a>JS面试题详解</h2><h3 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h3><ul>
<li>值类型</li>
<li>引用类型：对象、数组、函数</li>
<li><p>typeof 运算符：</p>
<pre><code>typeof undefined;    /undefined
typeof &apos;abc&apos;;        /string
typeof 123;            /number
typeof true;        /boolean
typeof [];            /object
tyoeof {};             /object
typeof null;         /object
typeof console.log; /function
</code></pre></li>
<li><p>变量计算：</p>
<pre><code>待定
</code></pre></li>
<li><p>问题：何时使用 === 何时使用==</p>
<pre><code>if (obj.a == null) {
    //这里相当于obj.a === null || obj.a === undefined 简写形式
    //这里jquery 码源推荐的写法
    }
</code></pre></li>
<li>JS中的内置函数：<ul>
<li><code>Object</code>、<code>Array</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Function</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code>。</li>
</ul>
</li>
<li>JS按存储方式区分变量类型：值类型、引用类型</li>
<li><p>如何理解JSON：JSON只不过是一个JS对象而已，常用API：</p>
<pre><code>JSON.stringify({a:10,b:20});        /对象转字符串
JSON.parse(&apos;{&quot;a&quot;:10,&quot;b&quot;:20}&apos;);    /字符串转对象
</code></pre></li>
</ul>
<hr>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul>
<li><p>构造函数</p>
<pre><code>function Foo(name, age) {
    this.name = name;
    this.age = age;
    this.class = &apos;class-1&apos;;
    // return this; // 默认有这行
    // Foo开头大写，默认认知就是构造函数
    }
var f = new Foo(&apos;zhangsan&apos;,20);
// var fn1 = new Foo(&apos;list&apos;,22) //创建多个对象
</code></pre></li>
<li>构造函数-扩展<ul>
<li>var = a {} 其实是 var a = new Object()的语法糖</li>
<li>var = a [] 其实是 var a = new Array()的语法糖</li>
<li>function Foo(){…} 其实是 var Foo = new Function(…)</li>
<li>使用instanceof判断一个函数是否是一个变量的构造函数<ul>
<li>判断一个变量是否为’数组’：变量 <code>instanceof Array</code></li>
</ul>
</li>
</ul>
</li>
<li><p>5个常见原型规则</p>
<ol>
<li><p>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了”null”意外）</p>
<pre><code>var obj = {}; obj.a = 100;
var arr = []; arr.a = 100;
function fn () {};
fn.a = 100;
</code></pre></li>
<li><p>所有的引用类型（数组、对象、函数），都有一个<code>_proto_（隐式原型）</code>属性，属性值是一个普通的对象</p>
<pre><code>console.log(obj.__proto__);
console.log(arr.__proto__);
consolo.log(fn.__proto__); 
</code></pre></li>
<li><p>所有的函数，都有一个<code>prototype（显式原型）</code>属性，属性值是一个普通的对象</p>
<pre><code>console.log(fn.prototype);
</code></pre></li>
<li><p>所有的引用类型（数组、对象、函数），<code>__proto__（隐式原型）</code>属性值指向（完全等）它的构造函数的<code>prototype（显式原型）</code>属性值</p>
<pre><code>console.log(obj.__proto__ === Object.prototype);
</code></pre></li>
<li><p>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<code>__proto__（隐式原型）</code>（既它的构造函数的<code>prototype（显式原型）</code>）中寻找</p>
<pre><code>//构造函数
funciton Foo(name,age) {
    this.name = name;
    }
Foo.prototype.alertName = function () {
    alert(this.name);
    };
//创建示例
var f = new Foo(&apos;zhangsan&apos;);
f.printName = function () {
    console.log(this.name);
    };
//测试
f.printName();
f.alertName();
f.toString(); //要去 f.__proto__.__proto___（下图所示）
</code></pre><p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-13/39252999.jpg" alt=""><br><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-13/87481822.jpg" alt=""></p>
</li>
</ol>
</li>
<li><p>规则的补充两点：</p>
<pre><code>1、循环对象自身的属性——`f.hasOwnProperty()`
2、this永远指向对象本身
</code></pre></li>
<li><p>原型链—instanceof</p>
<ul>
<li><code>f instanceof Foo</code> 的判断逻辑是：</li>
<li><code>f</code> 的<code>__proto__</code>一层一层往上，能否对应到<code>Foo.prototype</code></li>
<li>再试着判断<code>f instanceof Object</code></li>
<li><p>原型链示例：</p>
<pre><code>// 定义一个构造函数
 function Elem(id) {
     this.elem= document.getElementById(id);
 }
 // 扩展原型
 Elem.prototype.html = function (val) {
     var elem = this.elem;
     if (val) {
         elem.innerHTML = val;
         return this; // 链式操作
     } else {
         return elem.innerHTML
     }
 };
 // 扩展方法(事件绑定）
 Elem.prototype.on = function (type, fn) {
     var elem = this.elem;
     elem.addEventListener(type, fn);
 };

 var div1 = new Elem(&apos;head&apos;);
 console.log(div1.html());
div1.html(&apos;&lt;p&gt;hello world&lt;/p&gt;&apos;);
div1.on(&apos;click&apos;,function () {
    alert(&apos;clicked&apos;)
})    ;
//以上是一个封装DOM查询的例子
</code></pre></li>
</ul>
</li>
</ul>
<hr>
<h3 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h3><ul>
<li>知识点总结<ul>
<li>执行上下文</li>
<li>this</li>
<li>作用域</li>
<li>作用域链</li>
<li>闭包</li>
</ul>
</li>
<li><p>执行上下文</p>
<ul>
<li>范围：一段<code>&lt;script&gt;</code>或者一个函数（生成一个执行上下文）</li>
<li>全局：变量定义、函数声明 （针对一段<code>&lt;script&gt;</code>，执行之前把其拿出来）</li>
<li>函数：变量定义、函数声明、<code>this</code>、<code>*arguments</code> （针对一个函数执行之前）</li>
<li><em>解释</em>：<code>arguments</code><ul>
<li>使用特殊对象 arguments，开发者无需明确指出参数名</li>
<li>用 arguments.length 检测函数的参数个数</li>
<li>用 arguments 对象判断传递给函数的参数个数，可模拟函数重载</li>
</ul>
</li>
<li><p>PS：注意函数表达式和函数声明的区别</p>
<pre><code>function fn(){};     // 函数声明
var fn = function(){};        // 函数表达式
</code></pre></li>
</ul>
</li>
<li><p>this</p>
<ul>
<li><p><code>this</code>要在执行时才能确认值，定义时无法确认</p>
<pre><code>var a = {
    name: &apos;A&apos;,
    fn: function () {
        console.log(this.name);
    }
};
a.fn(); // this === a
a.fn.call({name: &apos;B&apos;}); // this === {name: &apos;B&apos;}
var fn1 = a.fn;
fn1(); // this === window
</code></pre></li>
<li><p>作为构造函数执行</p>
<pre><code>function Foo(name){
    this.name = name;
}
var f = new Foo(&apos;KinW&apos;);
</code></pre></li>
<li><p>作为对象属性执行</p>
<pre><code>var obj = {
    name: &apos;A&apos;,
    printName: function () {
        console.log(this.name);
    }
obj.printName();
</code></pre></li>
<li><p>作为普通函数执行</p>
<pre><code>function fn() {
    console.log(this); // this === window    
}
</code></pre></li>
<li><p><code>call（最常用）</code>、<code>apply</code>、<code>bind</code></p>
<pre><code>function fn1(name) {
    alert(name);
    console.log(this);
}
fn1.call({x:100},&apos;KinW&apos;,20);
fn1.apply({x:100},[&apos;KinW&apos;,20]);

var fn2 =function (name,age)
{
    alert(name);
    console.log(this);
}.bind({y:200})
fn2(&apos;KinW&apos;,20)
</code></pre></li>
</ul>
</li>
<li><p>作用域</p>
<ul>
<li><p>JavaScript中没有块级作用域（不要在块内声明变量，不易读）</p>
<pre><code>// 无块级作用域
if (true){
    var name = &apos;KinW&apos;;
}
console.log(name); // 可以读取块内变量
</code></pre></li>
<li><p>只有函数和全局作用域</p>
<pre><code>// 函数和全局作用域
var a = 100;
function fn(){
    var a = 200;
    console.log(&apos;fn&apos;,a);
}
console.log(&apos;global&apos;,a);
fn();
</code></pre></li>
<li><p>作用域链</p>
<pre><code>var a = 100;
function fn(){
    var b = 200;

    // 当前作用域没有定义的变量，即“自由变量”
    console.log(a); // 函数的父级作用域 -&gt; 全局作用域
    console.log(b);
}
fn();

var a =100;
function F1(){
    var b = 200;
    function F2(){
        var c = 300;
        console.log(a); // a 是自由变量
        console.log(b); // b 是自由变量
        console.log(c);
    }    
    F2();
}
F1();
</code></pre></li>
</ul>
</li>
<li><p>闭包及其使用场景</p>
<ul>
<li><p>函数作为返回值（示例）</p>
<pre><code>function F1(){
    var a = 100;
    // 返回一个函数（函数作为返回值）
    return function (){
        console.log(a); // 自由变量，父作用域寻找
    };
}
// f1 得到一个函数
var f1 = F1(); // 返回一个函数
var a = 200;
f1(); // a = 100，次级作用域是对其进行定义的作用域F1）
</code></pre></li>
<li><p>函数作为参数传递（示例）</p>
<pre><code>function F1(){
    var a = 100;
    // 返回一个函数（函数作为返回值）
    return function(){
        console.log(a);    // 自由变量，父作用域寻找
    };
}
// f1 得到一个函数
var f1 = F1(); // 返回一个函数
function F2(fn){
    var a = 200;
    fn();
}
F2(f1); // a = 100，把f1带入F2中执行
</code></pre></li>
</ul>
</li>
<li><p>实际开发中闭包的应用：封装变量，收敛权限</p>
<pre><code>// 闭包实际应用中，主要用于封装变量，收敛权限
function isFirstLoad(){
    var _list = []; // 下划线，这个变量是私有的
    return function(id){
        if(_list.indexOf(id)&gt;=0){
            return false;
        }else{
            _list.push(id);
            return true;
        }
    };
}

// 使用
var firstLoad = isFristLoad();
firstLoad(10);    //    true
firstLoad(10);    //    false
firstLoad(20);    //    true
firstLoad(20);    // false
// 你在 isFirstLoad 函数外面，根本不可能修改掉`_list`的值
</code></pre></li>
</ul>
<hr>
<h3 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h3><ul>
<li>知识点总结<ul>
<li>什么是异步（对比同步）</li>
<li>前端使用异步的场景</li>
<li>异步和单线程</li>
</ul>
</li>
<li>什么是异步（对比同步）<ul>
<li>同步有一定的阻塞</li>
<li>异步不会卡顿，只是等待</li>
<li>什么时候需要异步？<ul>
<li>在可能发生等待的情况</li>
<li>等待过程中不能想alert一样阻塞程序运行</li>
<li>所有的“等待的情况”都需要异步</li>
</ul>
</li>
<li>两者区别：<ul>
<li>同步会阻塞代码执行，而异步不会</li>
<li><code>alert</code>是同步，<code>setTimeout</code>是异步</li>
</ul>
</li>
</ul>
</li>
<li><p>前端使用异步的场景</p>
<ul>
<li><p>定时任务：<code>setTimeout</code>、<code>setInverval</code></p>
<pre><code>// setTimeout示例
console.log(100);
setTimeout(function(){
    console.log(200);
})
console.log(300);
</code></pre></li>
<li><p>网络请求：<code>ajax</code>请求、动态 <code>&lt;img&gt;</code>加载</p>
<pre><code>// ajax请求示例
console.log(&apos;start&apos;);
&amp;.get(&apos;./data1.json&apos;, function(data1){
    console.log(data1)
});
console.log(&apos;end&apos;);

// img加载示例
console.log(&apos;start&apos;);
var img = document.createElement(&apos;img&apos;);
img.onload = function() {
    console.log(&apos;loaded&apos;)
};
img.src = &apos;/xxx.png&apos;;
console.log(&apos;end&apos;);
</code></pre></li>
<li><p>事件绑定</p>
<pre><code>// 事件绑定示例
console.log(&apos;start&apos;);
document.getElementById(&apos;btn1&apos;).addEventListener(&apos;click&apos;,function(){
    alert(&apos;clicked&apos;)
});
console.log(&apos;end&apos;);
</code></pre></li>
</ul>
</li>
<li><p>异步和单线程：只能干一件事，不能有任何阻塞。</p>
<pre><code>console.log(100);
setTimeout(function(){
    console.log(200);
})
console.log(300);
//下面为例子分析
</code></pre><ul>
<li>执行第一行，打印100</li>
<li>执行setTimeout后，传入setTimeout的函数会被暂存起来，不会立即执行（单线程的特点，不能同时干两件事）</li>
<li>执行最后一行，打印300</li>
<li>待所有程序执行完毕，处于空闲状态时，会立马看有没有暂存起来的程序需要执行</li>
<li>发现暂存起来的setTimeout中的函数无需等待时间，就立即拿过来执行</li>
</ul>
</li>
</ul>
<h3 id="JavaScript基础知识补充"><a href="#JavaScript基础知识补充" class="headerlink" title="JavaScript基础知识补充"></a>JavaScript基础知识补充</h3><ul>
<li>题目：<ul>
<li>获取2017-06-10格式的日期</li>
<li>获取随机数，要求是长度一致的字符串格式</li>
<li>写一个遍历对象和数组的通用forEach函数</li>
</ul>
</li>
<li>知识点：<ul>
<li>日期、Math、数组API、对象API</li>
</ul>
</li>
<li><p>日期</p>
<pre><code>Date.now(); // 获取当前时间毫秒数
var dt = new Date();
dt.getTime(); // 获取毫秒数
dt.getFullYear(); // 获取年
dt.getMonth(); // 获取月（0-11）
dt.getDate(); // 获取日（0-31）
dt.getHours(); // 获取小时（0-23）
dt.getMinutes(); // 获取分钟（0-59）
dt.getSeconds(); // 获取秒（0-59）
</code></pre></li>
<li>Math：获取随机数<code>Math.random()</code>（最常用，用于清楚缓存）</li>
<li><p>数组API：</p>
<ul>
<li><p>forEach 遍历所有元素</p>
<pre><code>var arr = [1,2,3];
arr.forEach(function (item, index){
    // 遍历数组的所有元素
    console.log(index, item)
})
</code></pre></li>
<li><p>every 判断所有元素是否都符合条件</p>
<pre><code>var arr = [1,2,3];
var result = arr.every(function (item, index){
    // 用来判断所有的数组元素，都满足一个条件
    if (item &lt; 4){
        return true;
    }
});
console.log(result);
</code></pre></li>
<li><p>some 判断是否有至少一个元素符合条件</p>
<pre><code>var arr = [1,2,3];
var result = arr.some(function (item, index){
    // 用来判断所有的数组元素，都满足一个条件
    if (item &lt; 2){
        return true;
    }
});
console.log(result);
</code></pre></li>
<li><p>sort 排序</p>
<pre><code>var arr = [1,4,2,3,5];
var arr2 = arr.sort(function(a, b){
    // 从小到大排序
    return a - b;
    // 从大到小排序
    // return b - a;
});
console.log(arr2);
</code></pre></li>
<li><p>map 对元素重新组装，生成新数组</p>
<pre><code>var arr = [1,2,3,4];
var arr2 = arr.map(function(item, index){
    // 将元素重新组装，并返回
    return &apos;这是：&apos; + item
});
console.log(arr2);
</code></pre></li>
<li><p>filter 过滤符合条件的元素</p>
<pre><code>var arr = [1,2,3];
var arr2 = arr.filter(function(item, index){
    // 通过某一个条件过滤数组
    if (item &gt;=2){
        return true;
    }
})
console.log(arr2);
</code></pre></li>
</ul>
</li>
<li><p>对象API：</p>
<ul>
<li><p>for ( in )</p>
<pre><code>var obj = {
    x: 100,
    y: 200,
    z: 300
};
var key;
for (key in obj){
    // 注意，hasOwnProperty 知识点在原型链知识点中
    if (obj.hasOwnProperty(key)){
        console.log(key, obj[key]);
    }
};
</code></pre></li>
</ul>
</li>
<li><p>获取2017-06-10格式的日期</p>
<pre><code>function formatDate(dt){
    if(!dt){
        dt = new Date();
    }
    var year = dt.getFullYear();
    var month = dt.getMonth() + 1 ;
    var date = dt.getDate()
    if(month&lt;10){
        // 强制类型转换
        month = &apos;0&apos; + month;
    }
    if(date&lt;10){
        // 强制类型转换
        date = &apos;0&apos; + date;
    }
    // 强制类型转换
    return year + &apos;-&apos; + month + &apos;-&apos; + date ;
}
var dt = new Date();
var formatDate = formatDate(dt);
console.log(formatDate);
</code></pre></li>
<li><p>获取随机数，要求是长度一致的字符串格式</p>
<pre><code>var random = Math.random();
var random = random + &apos;0000000000&apos;;
var random = random.slice(0, 10);
console.log(random);
</code></pre></li>
<li><p>写一个遍历对象和数组的通用forEach函数</p>
<pre><code>function forEach(obj, fn){
    var key;
    if(obj instanceof Array){
        // 准确判断是不是数组
        obj.forEach(function (item, index){
            fn(index, item);
        });
    }else{
        // 不是数组就是对象
        for (key in obj){
            fn(key, obj[key]);
        }
    }
}
var arr = [1,2,3];
// 参数顺序改变，为了和对象的遍历格式保持一致
forEach(arr, function(index, item){
    console.log(index, item)
})

var obj = {x:100,y:200};
forEach(obj, function(key, value){
    console.log(key,value)
});
</code></pre><h3 id="JS-Web-API"><a href="#JS-Web-API" class="headerlink" title="JS-Web-API"></a>JS-Web-API</h3></li>
<li>常说的JS包含两部分：<ul>
<li>1、JS基础知识（ECMA262标准）</li>
<li>2、JS-Web-API（W3C标准）</li>
</ul>
</li>
<li><p>DOM知识点</p>
<ul>
<li>DOM本质：将HTML结构化，浏览器把拿到的html代码，结构化成一个浏览器能识别并且js可操作的一个模型。</li>
<li>DOM的基本数据结构就是：树</li>
<li><p>DOM节点操作</p>
<ul>
<li>获取DOM节点：<code>document.getElementById()元素</code>、<code>document.getElementsByTagName()集合</code>、<code>document.getElementsByClassName()集合</code>、<code>document.querySelectorAll()集合</code></li>
<li><p>property（是一个JS对象的属性的修改）：p class=p1&gt;&gt;<code>p2</code></p>
<pre><code>var pList = document.querySelectorAll(&apos;p&apos;);
var p = pList[0];
console.log(p.style.width); // 获取样式
p.style.width = &apos;100px&apos;; // 修改样式
console.log(p.className); // 获取class
p.className = &apos;p1&apos;; // 修改class

// 获取nodeName和nodeType
console.log(p.nodeName);
console.log(p.nodeType);
</code></pre></li>
<li><p>Attribute（是对html标签属性的修改）： p data-name=<code>&#39;KinW&#39;</code></p>
<pre><code>var pList = document.querySelectorAll(&apos;p&apos;);
var p = pList[0];
p.getAttribute(&apos;data-name&apos;) ;
p.setAttribute(&apos;data-name&apos;,&apos;KinW&apos;);
p.getAttribute(&apos;style&apos;);
p.setAttribute(&apos;style&apos;,&apos;font-size:30px;&apos;);
</code></pre></li>
</ul>
</li>
<li><p>DOM结构操作</p>
<ul>
<li><p>新增节点</p>
<pre><code>var div1 = document.getElementById(&apos;div1&apos;)
// 添加节点
var p1 = document.createElement(&apos;p&apos;)
p1.innerHTML = &apos;this is p1&apos;
div1.appendChild(p1) // 添加新创建的元素
// 移动已有节点
var p2 = document.getElementById(&apos;p2&apos;)
div1.appendChild(p2)
</code></pre></li>
<li><p>获取父元素</p>
<pre><code>var div1 = document.getElementById(&apos;div1&apos;)
var parent = div1.parentElement
</code></pre></li>
<li><p>获取子元素</p>
<pre><code>var div1 = document.getElementById(&apos;div1&apos;)
var child = div1.childNodes
</code></pre></li>
<li><p>删除节点</p>
<pre><code>div1.removeChild(child[0])
</code></pre></li>
</ul>
</li>
</ul>
</li>
<li><p>BOM知识点</p>
<ul>
<li>题目：1、如何检测浏览器的类型；2、拆解url的各部分；</li>
<li><p>navigator</p>
<pre><code>var ua = navigator.userAgent
var isChrome = ua.indexOf(&apos;Chrome&apos;)
console.log(isChrome)
</code></pre></li>
<li><p>screen</p>
<pre><code>console.log(screen.width)
console.log(screen.height)
</code></pre></li>
<li><p>location</p>
<pre><code>console.log(location.href)
console.log(location.protocol) // &apos;http:&apos; &apos;https:&apos; 协议
console.log(location.host) // 域名
console.log(location.pathname) // &apos;/learn/199&apos; 路径
console.log(location.search)
console.log(location.hash)
</code></pre></li>
<li><p>history</p>
<pre><code>history.back() //返回
history.forward() //前进
</code></pre></li>
</ul>
</li>
<li><p>事件绑定</p>
<ul>
<li><p>题目：</p>
<pre><code>1、编写一个通用的事件监听函数
2、描述时间冒泡流程
3、对于一个无限下拉加载图片的页面，如何给每个图片绑定事件
</code></pre></li>
<li>知识点：1、通用事件绑定；2、事件冒泡；3、代理</li>
<li><p>通用事件绑定：</p>
<pre><code>var btn = document.getElementById(&apos;btn1&apos;);
btn.addEventListener(&apos;click&apos;,function (envent){
    console.log(&apos;clicked&apos;);
});

function bindEvent(elem, type, fn){
    elem.addEventListener(type, fn);
}

var a = document.getElementById(&apos;link1&apos;);
bindEvent(a, &apos;click&apos;, function(e){
    e.preventDefault(); // 阻止默认行为
    alert(&apos;clicked&apos;);
});
</code></pre></li>
<li><p>事件冒泡：</p>
</li>
</ul>
</li>
</ul>
<pre><code>        function bindEvent(elem, type, fn) {                          elem.addEventListener(type, fn);
        }
        var p1 = document.getElementById(&apos;p1&apos;);
        var body = document.body;
        bindEvent(p1, &apos;click&apos;, function(e) {
            e.stopPropagation();// 阻止向上冒泡
            alert(&apos;激活&apos;)
        })
        bindEvent(body, &apos;click&apos;, function(e) {
            alert(&apos;取消&apos;)
        })

- 事件冒泡流程：
    - DOM树形结构
    - 事件冒泡
    - 阻止冒泡
    - 冒泡的应用        
- 完善的通用绑定事件函数：

    ![](http://ovl5r0omj.bkt.clouddn.com//17-10-12/32987972.jpg)        
- 无限下拉加载图片的页面，绑定事件
    - 使用代理
    - 代理的两个优点：1、代码简洁；2、浏览器压力小，提高效率和性能
</code></pre><ul>
<li><p><strong>Ajax</strong></p>
<ul>
<li>题目：<ul>
<li>手动编写一个ajax，不依赖第三方库</li>
<li>跨域的几种实现方式（跨域的原理）</li>
</ul>
</li>
<li>知识点：<ul>
<li>XMLHttpRequest</li>
<li>状态码说明</li>
<li>跨域  </li>
</ul>
</li>
<li><p><strong>XMLHttpRequest</strong></p>
<pre><code>var xhr = new XMLHttpRequest();
xhr.open(&quot;GET&quot;, &quot;/api&quot;, true);
xhr.onreadystatechange = function() {
// 这里的函数异步执行，参考之前JS基础中的异步模块
if (xhr.readyState == 4) {
if (xhr.status == 200) {
    alert(xhr.responseText)
        }
    }
}
xhr.send(null);
</code></pre><p>  <img src="http://ovl5r0omj.bkt.clouddn.com//17-10-12/60055401.jpg" alt=""><br>  <img src="http://ovl5r0omj.bkt.clouddn.com//17-10-12/70043625.jpg" alt=""></p>
</li>
<li>跨域<ul>
<li>什么是跨域：<ul>
<li>浏览器有同源策略，不允许ajax访问其他域接口</li>
<li>跨域条件：协议、域名、端口（http默认80、https默认43），其中有一个不同就算跨域</li>
</ul>
</li>
</ul>
</li>
<li>可以跨域的三个标签<ul>
<li>但是有三个标签允许跨域加载资源</li>
<li><code>&lt;img src=xxx&gt;</code>：用于打点统计，统计网站可能是其他域</li>
<li><code>&lt;link href=xxxx&gt;</code>：可以使用CDN，CDN的也是其他域</li>
<li><code>&lt;script src=xxx&gt;</code>：可以用于JSONP、CDN，CDN的也是其他域</li>
</ul>
</li>
<li>跨域注意事项：<ul>
<li>所有的跨域请求都必须经过信息提供方允许</li>
<li>如果未经允许即可获取，那是浏览器同源策略出现漏洞</li>
</ul>
</li>
<li>JSONP实现原理<ul>
<li>加载<a href="http://kinwah.top/index.html">http://kinwah.top/index.html</a></li>
<li>不一定服务器端真正有一个index.html文件</li>
<li>服务器可以根据请求，动态生成一个文件，返回</li>
<li>同理于<code>&lt;script src=&quot;http://kinwah.top/api.js&quot;&gt;</code></li>
</ul>
</li>
<li>存储<ul>
<li>题目：请描述一下<code>cookie</code>，<code>sessionStorage</code>和<code>loacalStorage</code>的区别<ul>
<li>容量区别</li>
<li>是否会携带到ajax中</li>
<li>API易用性（cookie需要自己封装）</li>
</ul>
</li>
<li>cookie：<ul>
<li>本身用于客户端和服务器通信</li>
<li>但是它有本地存储的功能，于是就被“借用”了。</li>
<li>使用document.cookie = … 获取和修改即可</li>
<li>缺点1、存储量太小，只有4K</li>
<li>缺点2、所有http请求都带着，会影响获取资源的效率</li>
<li>API简单，需要封装才能用 document.cookie = … </li>
</ul>
</li>
<li>sessionStorage和localStorage：<ul>
<li>HTML5专门为存储而设计，最懂容量5M</li>
<li>API简单易用</li>
<li><code>localStorage.setItem(key,value)</code></li>
<li><code>localStorage.getItem(key)</code></li>
<li>IOS safari隐藏模式下，localStorage.getItem会报错，建议统一使用<code>try-catch</code>封装</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul>
<li>知识点:<ul>
<li>不使用模块化的情况</li>
<li>使用模块化</li>
<li>AMD</li>
<li>CommonJS</li>
</ul>
</li>
<li><p>不使用模块化的情况:</p>
<ul>
<li><p>util.js getFormatDate函数</p>
<pre><code>funciton getFormatDate(date, type){
    //type === 1 返回 2017-11-11
    //type === 2 返回 2017年11月11日 格式
    //type ...
}
</code></pre></li>
<li><p>a-util.js aGetFormatDate函数 使用getFormatDate</p>
<pre><code>function aGetFormatDate(date){
    //要求返回 2017年11月11日 格式
    return getFormatDate(date, 2)
}
</code></pre></li>
<li><p>a.js aGetFormatDate</p>
<pre><code>var dt = new Date()
console.log(aGetFormatDate(dt))
</code></pre></li>
<li><p>必须层级关系,必须全局变量,容易造成全局污染</p>
</li>
<li>知道<code>a.js</code>依赖<code>a-util.js</code>,但是可能不知道<code>a-util.js</code>依赖<code>util.js</code></li>
</ul>
</li>
<li><p>使用模块化的情况:</p>
<pre><code>// util.js
export{
    getFormatDate: function(date, type){
        // type === 1 返回 2017-11-11
        // type === 2 返回 2017年11月11日 格式
    }
}

// a-util.js
var getFormatDate = require(&apos;util.js&apos;)
export{
    aGetFormatDate: function(date){
        // 要求返回 2017年11月11日 格式
        return getFormatDate(date,2)
    }
}

//a.js
var aGetFormatDate = require(&apos;a-util.js&apos;)
var dt = new Date()
console.log(aGetFormatDate(dt))
</code></pre><ul>
<li>直接使用<code>&lt;script src=&#39;a.js&#39;&gt;&lt;/script&gt;</code>,其他的根据依赖关系,会自动引用</li>
<li>函数没必要做成全局变量,不会带来污染和覆盖</li>
</ul>
</li>
<li>AMD:异步模块定义<ul>
<li>require.js : <a href="http://requirejs.org" target="_blank" rel="external">官网地址</a></li>
<li>全局<code>define</code>函数</li>
<li>全局<code>require</code>函数</li>
<li>依赖JS会自动,异步加载</li>
<li>结合<code>util.js</code>,<code>a-util.js</code>,<code>a.js</code></li>
</ul>
</li>
</ul>
<pre><code>        // util.js
        define(function(){
            return{
                getFormatDate: function(date,type){
                    if(type === 1){
                        return &apos;2017-11-11&apos;
                    }
                    if(type === 2){
                        return &apos;2017年11月11日&apos;
                    }
                }
            }
        })

        // a-util.js
        define([&apos;./util.js&apos;],function(util){
            return{
                aGetFormatDate: function(date){
                    return util.getFormatDate(date, 2)
                }
            }
        })

        // a.js
        define([&apos;./a-util.js&apos;],function(aUtil){
            return{
                printDate: function(date){
                    console.log(aUtil.aGetFormatDate(date))
                }
            }
        })
        // main.js
        require([&apos;./a.js&apos;],function(a){
            var date = new Date()
            a.printDate(date)
        })

- 使用:`&lt;script src=&apos;/require.min.js&apos; data-main=&apos;./main.js&apos;&gt;&lt;/script&gt;`        
</code></pre><ul>
<li>CommonJS<ul>
<li><code>node.js</code>模块化规范,现在被大量用于前端</li>
<li>前端开发依赖的插件和库,都可以从<code>npm</code>中获取</li>
<li>构建工具的高度自动化,使得使用<code>npm</code>成本非常低</li>
<li>CommonJS不会异步加载JS,而是同步一次性加载出来</li>
</ul>
</li>
<li><p>使用CommonJS</p>
<pre><code>// util.js
module.export = {
    getFormatDate: function(date, type){
        if(type === 1){
            return &apos;2017-11-11&apos;;
        }
        if(type === 2){
            return &apos;2017年11月11日&apos;;
        }
    }
}

// a-util.js
var util = require(&apos;util.js&apos;)
module.exports = {
    aGetFormatDate: function(date){
        return util.getFormatDate(date, 2)
    }
}
</code></pre></li>
<li><p>AMD和CommonJS的使用场景</p>
<ul>
<li>需要异步加载JS,使用AMD</li>
<li>使用了npm之后,建议使用CommonJ</li>
</ul>
</li>
<li>上线回滚<ul>
<li>知识点:<ul>
<li>上线和回滚的基本流程</li>
<li>linux基本命令</li>
</ul>
</li>
<li>上线和回滚的基本流程:<ul>
<li>十分重要的开发环节</li>
<li>各个公司的具体流程不同</li>
<li>有专门的工具或者系统完成</li>
<li>如果没参与过,面试时也要说出要点</li>
<li>只讲要点,具体实现没法讲解</li>
</ul>
</li>
<li>上线流程要点:<ul>
<li>将测试完成的代码提交到git版本库的<code>master</code>分支</li>
<li>将当前服务器的代码全部打包并记录版本号,备份</li>
<li>将<code>master</code>分支的代码提交覆盖到线上服务器,生成新版本号</li>
</ul>
</li>
<li>回滚流程要点:<ul>
<li>将当前服务器的代码打包并记录版本好,备份</li>
<li>将备份的上一个版本号解压,覆盖到线上服务器,并生成新版本号</li>
</ul>
</li>
</ul>
</li>
<li>linux基本命令<ul>
<li>服务器使用linux居多,server版,只有命令行</li>
<li>测试环境要匹配线上环境,因此也是linux</li>
<li>经常需要登录测试机来自己配置,获取数据</li>
</ul>
</li>
</ul>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul>
<li>运行环境:<ul>
<li>浏览器就可以通过访问链接来得到页面的内容</li>
<li>通过绘制和渲染,显示出页面的最终样子</li>
<li>整个过程中,我们需要考虑什么问题?</li>
</ul>
</li>
<li>知识点:<ul>
<li>页面加载过程</li>
<li>性能优化</li>
<li>安全性</li>
</ul>
</li>
<li><p>页面加载:</p>
<ul>
<li>知识点:<ul>
<li>加载资源的形式</li>
<li>加载一个资源的过程</li>
<li>浏览器渲染页面的过程</li>
</ul>
</li>
<li>加载资源的形式:<ul>
<li>输入url(或跳转页面)加载html</li>
<li><code>http://www.baidu.com</code></li>
<li>加载html中的静态资源</li>
<li><code>&lt;script src=&quot;/static/js/jquery.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
<li>加载一个资源的过程<ul>
<li>浏览器根据DNS服务器得到域名的IP地址</li>
<li>向这个IP的机器发送http请求</li>
<li>服务器收到,处理并返回http请求</li>
<li>浏览器得到返回内容</li>
</ul>
</li>
<li>浏览器渲染页面的过程<ul>
<li>根据HTML结构生成DOM Tree</li>
<li>根据CSS生成CSSOM</li>
<li>将DOM和CSSOM整合行程RenderTree</li>
<li>根据RenderTree开始渲染和展示</li>
<li>遇到<code>&lt;script&gt;</code>时,会执行并阻塞渲染</li>
<li>JS要放到<code>&lt;body&gt;</code>最下方</li>
</ul>
</li>
<li><p>题目:</p>
<ul>
<li>从输入url到得到html的详细过程<ul>
<li>浏览器根据DNS服务器得到域名的IP地址</li>
<li>向这个IP的机器发送http请求</li>
<li>服务器收到,处理并返回http请求</li>
<li>浏览器得到返回内容</li>
</ul>
</li>
<li><p><code>window.onload</code>和<code>DOMContentLoaded</code>的区别</p>
<pre><code>window.addEventListener(&apos;load&apos;,function(){
    // 页面的全部资源加载完才会执行,包括图片.视频等.
})

document.addEventListener(&apos;DOMContentLoaded&apos;,function(){
    // DOM 渲染完即可执行,此时图片,视频还可能没加载完
})
</code></pre></li>
</ul>
</li>
</ul>
</li>
<li><p>性能优化:</p>
<ul>
<li>原则:<ul>
<li>多使用内存,缓存或者其他方法</li>
<li>减少CPU计算,减少网络</li>
</ul>
</li>
<li>从哪入手?<ul>
<li>加载页面和静态资源</li>
<li>页面渲染</li>
</ul>
</li>
<li>加载资源优化<ul>
<li>静态资源的压缩合并</li>
<li>静态资源缓存</li>
<li>使用CDN让资源加载更快</li>
<li>使用SSR后端渲染,数据直接输出到HTML中</li>
</ul>
</li>
<li>渲染优化<ul>
<li>CSS放前面,JS放后面</li>
<li>懒加载(图片懒加载,下拉加载更多)</li>
<li>减少DOM查询,对DOM查询做缓存</li>
<li>减少DOM操作,多个操作尽量合并在一起执行</li>
<li>事件节流</li>
<li>尽早执行操作(如<code>DOMContentLoaded</code>)</li>
</ul>
</li>
<li><p>例子:</p>
<ul>
<li>把多个JS文件压缩成一个,资源合并,较少请求</li>
<li>缓存:通过链接名称控制缓存,只有内容改变的时候,链接名称才会改变,从而减少缓存次数</li>
<li>多使用CDN</li>
<li>使用SSR后端渲染:现在<code>Vue</code>,<code>React</code>提出的概念,<code>jsp</code>,<code>php</code>,<code>asp</code>都属于后端渲染</li>
<li><p>懒加载:</p>
<pre><code>&lt;img id=&quot;img1&quot; src=&quot;preview.png&quot; data-realsrc=&quot;abc.png&quot; /&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var img1 = document.getElementById(&apos;img1&apos;);
    img1.src = img1.getAttribute(&apos;data-realsrc&apos;);
&lt;/script&gt;
</code></pre></li>
<li><p>缓存DOM查询:</p>
<pre><code>// 未缓存DOM查询
var i;
for (i=0;i&lt;document.getElementsByTagName(&apos;p&apos;).length;i++){
    // todo
}

// 缓存了DOM查询
var pList = document.getElementsByTagName(&apos;p&apos;)
var i;
for (i=0;i&lt;pList.length;i++){
    // todo
}
</code></pre></li>
<li><p>合并DOM插入</p>
<pre><code>var listNode = document.getElementById(&apos;list&apos;);

// 要插入10个li标签
var frag = document.createDocumentFragment();
var x,li;
for(x=0;x&lt;10;x++){
    li = document.createElement(&apos;li&apos;);
    li.innerHTML = &quot;List item&quot; + x;
    frag.appendChild(li);
}        

listNode.appendChild(frag);
</code></pre></li>
<li><p>事件节流</p>
<pre><code>var textarea = document.getElementById(&apos;text&apos;);
var timeoutId;
textarea.addEventListener(&apos;keyup&apos;,function(){
    if(timeoutId){
        clearTimeout(timeoutId)
    }
    timeoutId = setTimeout(function(){
        // 触发 change 事件
    },100)
})        
</code></pre></li>
</ul>
</li>
</ul>
</li>
<li><p>安全性</p>
<ul>
<li>知识点:<ul>
<li>XSS跨站请求攻击</li>
<li>XSRF跨站请求伪造</li>
</ul>
</li>
<li>XSS跨站请求攻击:<ul>
<li>新浪博客写一篇文章,同时偷偷插入一段<code>&lt;script&gt;</code></li>
<li>攻击代码中,获取<code>cookie</code>,发送自己的服务器</li>
<li>发布博客,有人查看博客内容</li>
<li>会把查看者的<code>cookie</code>发送到攻击者的服务器</li>
</ul>
</li>
<li>XSS预防<ul>
<li>前端替换关键字,例如替换&lt;为<code>&amp;lt</code>;&gt;为<code>&amp;gt</code></li>
<li>后端替换比较好.</li>
</ul>
</li>
<li>XSRF跨站请求伪造<ul>
<li>你已登录一个购物网站,正在浏览商品</li>
<li>该网站付费接口是<code>xxx.com/pay?id=100</code>但是没有任何验证</li>
<li>然后你收到一封邮件,隐藏着<code>&lt;img src=xxx.com/pay?id=100&gt;</code></li>
<li>你查看邮件的时候,就已经悄悄的付费购买了</li>
</ul>
</li>
<li>XSRF预防<ul>
<li>增加验证流程,如输入指纹,密码,短信验证码等等</li>
</ul>
</li>
</ul>
</li>
<li><p>面试技巧</p>
<ul>
<li>简历:<ul>
<li>简洁明了,重点突出项目经历和解决方案</li>
<li>把个人博客放在简历中,并且定期维护更新博客</li>
<li>把个人的开源项目放在简历中,并维护开源项目</li>
<li>简历千万不要造假,要保持能力和经历上的真实性</li>
</ul>
</li>
<li>面试过程中:<ul>
<li>如何看待加班?加班就像借钱,救急不救穷</li>
<li>千万不可挑战面试官,不要反考面试官</li>
<li>学会给面试官惊喜,但不要太多</li>
<li>遇到不会回答的问题,说出你知道的也可以</li>
<li>谈谈你的缺点—-说一下你最近正在学什么东西就可以了. </li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS面试题详解&quot;&gt;&lt;a href=&quot;#JS面试题详解&quot; class=&quot;headerlink&quot; title=&quot;JS面试题详解&quot;&gt;&lt;/a&gt;JS面试题详解&lt;/h2&gt;&lt;h3 id=&quot;变量类型和计算&quot;&gt;&lt;a href=&quot;#变量类型和计算&quot; class=&quot;headerlink
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript基础知识——变量类型和计算</title>
    <link href="http://KinWah.top//blog/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%A1%E7%AE%97.html"/>
    <id>http://KinWah.top//blog/JavaScript基础知识——变量类型和计算.html</id>
    <published>2017-09-09T16:50:43.000Z</published>
    <updated>2017-10-18T16:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a><font color="#3f51b5">变量类型和计算</font></h1><ul>
<li>常见题目：<ul>
<li>JS中使用typeof能得到哪些类型</li>
<li>何时使用 === 何时使用 ==</li>
<li>JS中有哪些内置函数</li>
<li>JS变量按照<strong>存储方式</strong>区分为哪些类型，并描述其特点</li>
<li>如何理解<code>JSON</code></li>
</ul>
</li>
<li>知识点：<ul>
<li>变量类型</li>
<li>变量计算</li>
</ul>
</li>
<li><p>变量类型：</p>
<ul>
<li>值类型：数值、布尔值、<code>null</code>、<code>undefined</code></li>
<li>引用类型：对象、数组、函数</li>
<li><p>typeof 运算符：</p>
<pre><code>typeof undefined;    /undefined
typeof &apos;abc&apos;;        /string
typeof 123;            /number
typeof true;        /boolean
typeof [];            /object
tyoeof {};             /object
typeof null;         /object
typeof console.log; /function
</code></pre></li>
</ul>
</li>
<li>变量计算——强制类型转换<ul>
<li>字符串拼接</li>
<li><code>==</code>运算符</li>
<li>if语句</li>
<li>逻辑运算</li>
</ul>
</li>
<li><p>何时使用 <code>===</code>；何时使用<code>==</code></p>
<pre><code>if (obj.a == null) {
    //这里相当于obj.a === null || obj.a === undefined 简写形式
    //这里jquery 码源推荐的写法
    }
</code></pre></li>
<li>JS中的内置函数：<ul>
<li><code>Object</code>、<code>Array</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Function</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code>。</li>
</ul>
</li>
<li>JS按存储方式区分变量类型：值类型、引用类型</li>
<li><p>如何理解JSON：JSON只不过是一个JS对象而已，常用API：</p>
<pre><code>JSON.stringify({a:10,b:20});        /对象转字符串
JSON.parse(&apos;{&quot;a&quot;:10,&quot;b&quot;:20}&apos;);    /字符串转对象
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变量类型和计算&quot;&gt;&lt;a href=&quot;#变量类型和计算&quot; class=&quot;headerlink&quot; title=&quot;变量类型和计算&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#3f51b5&quot;&gt;变量类型和计算&lt;/font&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;常见题目：&lt;ul&gt;
&lt;li&gt;J
    
    </summary>
    
      <category term="总结" scheme="http://KinWah.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JavaScript" scheme="http://KinWah.top/tags/JavaScript/"/>
    
      <category term="基础" scheme="http://KinWah.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="三座大山" scheme="http://KinWah.top/tags/%E4%B8%89%E5%BA%A7%E5%A4%A7%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>动手吧，用Hexo+Github搭建个人博客</title>
    <link href="http://KinWah.top//blog/%E5%8A%A8%E6%89%8B%E5%90%A7%EF%BC%8C%E7%94%A8Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://KinWah.top//blog/动手吧，用Hexo+Github搭建个人博客.html</id>
    <published>2017-08-25T16:50:43.000Z</published>
    <updated>2017-09-02T02:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：学习前端也有好些日子了，看到知乎或者掘金等平台上的前端大神们都有自己的私人博客，想起以前经常混迹的网易博客，突然萌发了搭建一个私人博客的想法。当然，写博客不是为了写而写，更多的是记录自己的学习和思维轨迹，同时也算是一个回顾和反思的地方，于是就有了这篇伪教程。</p>
<p>——<em>不为谁而做的歌，不为谁而写的诗，不为谁而码的字，而为自己的思想灵魂有个安放的居所。</em></p>
</blockquote>
<p>趁着有空，参照了网上很多篇的教程，把自己用Hexo+Github搭建博客的过程记录了一番：</p>
<p>我的博客地址：<a href="http://kinwah.top">http://kinwah.top</a><br><a id="more"></a></p>
<hr>
<h1 id="流程概括"><a href="#流程概括" class="headerlink" title="流程概括"></a><font color="#3f51b5">流程概括</font></h1><ol>
<li>本地搭建 Node.js 环境</li>
<li>本地搭建 Git 环境</li>
<li>注册并配置 Github帐号</li>
<li>安装并配置 Hexo</li>
<li>关联 Hexo 和 Github Pages</li>
<li>关联解析到个人域名</li>
<li>Hexo 常用操作</li>
<li>学习并适应用 Markdown 写文章</li>
<li>还看什么别人的博客？赶紧动手去搭建自己的博客去！</li>
</ol>
<blockquote>
<p>本教程适用于MacOS，如果是Win系统下大同小异，相似的操作和命令行是可以参考借鉴的，macOS下的终端，Win下就是命令行cmd。</p>
</blockquote>
<hr>
<h2 id="本地搭建-Node-js-环境"><a href="#本地搭建-Node-js-环境" class="headerlink" title="本地搭建 Node.js 环境"></a><font color="#3f51b5">本地搭建 Node.js 环境</font></h2><blockquote>
<p>由于Hexo博客系统是基于Node.js编写的，所以搭建Node.js环境是必不可少的环节。</p>
</blockquote>
<p>先去Node.js官网（中文网）：<a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a> 下载最新的安装包（注意自己的系统类型）</p>
<p>安装过程一般都会的，就是一路next就好，macOS和win都是。</p>
<p>接下来打开终端，输入<code>node -v</code>、<code>npm -v</code> 如果能正确显示版本号，说明Node.js环境配置完成，这是关键的第一步。</p>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/16711443.jpg" alt=""></p>
<hr>
<h2 id="本地搭建-Git-环境"><a href="#本地搭建-Git-环境" class="headerlink" title="本地搭建 Git 环境"></a><font color="#3f51b5">本地搭建 Git 环境</font></h2><blockquote>
<p>由于我们需要把本地写好的博客文章，提交到Github上，所以搭建Git环境也是必不可少的一环。</p>
</blockquote>
<p><strong>安装Git有两种办法</strong></p>
<ol>
<li>去 Git 官网：<a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a> 下载最新的安装包，直接安装（注意自己的系统类型）</li>
<li>在终端，用 homebrew 指令下载，前提是先安装 homebrew。</li>
</ol>
<ul>
<li>安装homebrew：在终端里，直接复制下面这段代码，并运行: </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<ul>
<li>输入<code>brew -v</code>查看homebrew是否安装成功。</li>
</ul>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/69891057.jpg" alt=""></p>
<ul>
<li>输入<code>brew install git</code>来安装Git。安装过程就省略了，懂英文的一步一步看着来。</li>
<li>输入<code>git --version</code>查看Git是否安装成功。</li>
</ul>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/82164945.jpg" alt=""></p>
<p>到此，Git环境也算基本搭建完毕，第二步顺利完成。</p>
<hr>
<h2 id="注册并配置-Github-帐号"><a href="#注册并配置-Github-帐号" class="headerlink" title="注册并配置 Github 帐号"></a><font color="#3f51b5">注册并配置 Github 帐号</font></h2><blockquote>
<p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p>
</blockquote>
<ul>
<li>对于拥有个人的github帐号，似乎已经成了现在程序员的标配了（瞎说瞎说，别打我），所以关于注册github帐号就不多作解释了。</li>
</ul>
<p><strong>Github注册：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></strong></p>
<p>创建博客相关文件仓库：Create a new repository。这个仓库的命名是有规则的：xxx.github.io</p>
<p>其中，Repository name用你的用账户名称：<font color="#ff4081">Owner.github.io</font> ，如下图所示</p>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/98352003.jpg" alt=""></p>
<p>然后访问：Owner.github.io，如果正常访问，没有提示404错误，说明你的Github已经配置完成，</p>
<p>Hexo的前期准备工作，所有需要的环境配置都已经完毕，就可以进行博客配置和设置了。</p>
<hr>
<h2 id="安装并配置-Hexo"><a href="#安装并配置-Hexo" class="headerlink" title="安装并配置 Hexo"></a><font color="#3f51b5">安装并配置 Hexo</font></h2><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>在安装Hexo之前，先花点时间看看Hexo的官方中文文档：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></p>
<p>全中文，简单易懂，网页简洁，赏心悦目，无论管你看或不看，它就在那里。（滑稽）</p>
<p><strong>安装Hexo:</strong></p>
<p>官网首页就有这么一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g \\安装hexo</div></pre></td></tr></table></figure>
<p>在终端里，把代码复制进去就完成了安装。期间可能会出现多个<font color="#ff4081">WARN</font>，别担心这不会影响使用，估计是服务器抽风而已。</p>
<p>然后像node和git一样，输入<code>hexo -v</code> 查看hexo版本，来确认安装是否完成。</p>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/3432682.jpg" alt=""></p>
<p><strong>接下来最重要的，就是建站了。</strong></p>
<blockquote>
<p>这里有个比较重要的点需要提醒，很多人安装了hexo之后，找不到自己的blog文件夹再哪，这里先提前教大家一个我个人觉得更加方便的办法。</p>
</blockquote>
<ul>
<li>先找到自己想要建立博客文件夹的目录位置。（比如我想建在文稿里面，这个随意）</li>
<li>接着右键文件夹 &gt; 服务 &gt; 新建位于文件夹的终端窗口</li>
</ul>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/10184465.jpg" alt=""></p>
<ul>
<li>然后终端里面打开，在这个基础下，在进行Hexo的安装和配置。（其实可以用<code>cd</code>的办法，但是路径太烦，还不如这个直接）</li>
</ul>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/68481988.jpg" alt=""></p>
<hr>
<p>完成上面步骤，安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init myBlog    #建站文件夹</div><div class="line">cd myBlog           #转到myBlog路径</div><div class="line">npm install         #安装</div></pre></td></tr></table></figure>
<p>新建完毕后，所在文件夹目录如下（有些文件可能需要新建博文之后才会生成）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── _config.yml     #全局配置文件</div><div class="line">├── db.json			#全局配置文件</div><div class="line">├── public          #生成的静态网页文件</div><div class="line">├── scaffolds       #模板</div><div class="line">├── themes          #主题</div><div class="line">├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</div><div class="line">| ├── _drafts       #草稿</div><div class="line">| └── _posts        #文章</div><div class="line">└── package.json    #npm 依赖等</div></pre></td></tr></table></figure>
<p><strong>运行Hexo本地服务</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s 				#简写</div><div class="line">hexo server			#全称</div></pre></td></tr></table></figure>
<p>hexo本地服务会建立一个 <font color="#ff4081"><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></font> 的网页。如果能够正常访问，则说明 Hexo 本地博客已经搭建完毕，但是这个只有本机电脑或者同一局域网内，同IP段的用户可以查看（手机，IPAD之类的），外网是看不到的。</p>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/68815440.jpg" alt=""></p>
<p><strong>错误小Tips：</strong>执行<code>hexo s</code>的时候，可能会提示找不到命令</p>
<p>解决办法：安装server，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo npm install hexo -server #sudo是获取权限</div><div class="line">npm install hexo -server --save #在终端根目录执行sudo -s可以获取全局权限，然后下面可以省略sudo前缀。</div></pre></td></tr></table></figure>
<p>完成上面所有步骤，hexo博客已经算基本安装配置完成了，是时候放到互联网上遛一遛了。</p>
<hr>
<h2 id="关联-Hexo-和-Github-Pages"><a href="#关联-Hexo-和-Github-Pages" class="headerlink" title="关联 Hexo 和 Github Pages"></a><font color="#3f51b5">关联 Hexo 和 Github Pages</font></h2><blockquote>
<p>这一步，就是将你的博客发布到网上，并且可以让大家都可以进行访问的重要步骤。</p>
</blockquote>
<p><strong>生成SSH key</strong></p>
<p>先来生成添加秘钥SSH，终端里输入一下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;  #一路Enter配置就行了。</div></pre></td></tr></table></figure>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/66627955.jpg" alt=""></p>
<p>进入这个地址，.ssh文件夹是隐藏的（shift+command+. 可以显示隐藏文件），用文本编辑器打开<code>id_rsa.pub</code>文件，然后把里面的内容全部复制下来（全部Ctrl+A），</p>
<p>然后进入：<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>：</p>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/83960977.jpg" alt=""></p>
<p>把内容粘贴到<code>Key</code>下面，<code>Title</code>随意填写就好。</p>
<p><strong>配置Git个人信息</strong></p>
<p>安装好git后，配置用户名和用户邮箱，以后每次与Git的交互都会使用该信息。打开终端，输入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;KinWah&quot; #改成你的Github用户名</div><div class="line">git config --global user.email &quot;591264998@qq.com&quot; #改成你的Github邮箱</div></pre></td></tr></table></figure>
<p>配置信息可以随时更改，以后想要更改使用上面指令，修改姓名和邮箱就可以。</p>
<p>同时可以使用<code>git config --list</code>指令查看Git的配置信息。</p>
<p><strong>配置Deployment</strong></p>
<p>在博客文件夹内，打开<code>_config.yml</code>文件，拉到文件最下面，找到<code># Deployment</code>，修改信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line"></div><div class="line">     type: git</div><div class="line"></div><div class="line">     repo: https://github.com/KinWah/KinWah.github.io.git #主要修改这个地址为你自己的地址</div><div class="line"></div><div class="line">     branch: master</div></pre></td></tr></table></figure>
<p><strong>把本地博客上传提交到Github上</strong></p>
<p>这里就涉及到Hexo常见的几个操作了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo clean 	#删除旧的 public 文件</div><div class="line">hexo g 		#新建新的 public 文件</div><div class="line">hexo d 		#开始部署</div><div class="line">可以集合起来：</div><div class="line">hexo clean</div><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>当你部署完毕之后，在浏览器里面输入你的Github地址：<a href="http://KinWah.github.io" target="_blank" rel="external">http://KinWah.github.io</a>（用户名改成你的），你能看到你网站显示出来的时候，Hexo + Github Pages就已经基本配置完成了。</p>
<p><strong>错误小Tips</strong>：如果部署失败了，需要安装一下扩展：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>完成上面的步骤，整个博客基本就可以投入使用了，接下来的进阶，就是美化优化和熟悉操作。</p>
<hr>
<h2 id="关联解析到个人域名"><a href="#关联解析到个人域名" class="headerlink" title="关联解析到个人域名"></a><font color="#3f51b5">关联解析到个人域名</font></h2><blockquote>
<p>估计大家也有想过，总是用<code>http://xxx.github.io</code>去查看博客确实有点让人不好记，那能不能改成自己的私人域名呢？</p>
</blockquote>
<p>为了让自己的博客看起来更加专业，更加个性化一点，绑定自己的个人域名就成为了很多人的优先选择了。</p>
<p>域名有便宜有贵，主要就是看域名是否冷门，现在主要还是万网，阿里云，腾讯云这些，我自己就是阿里云买的域名<code>kinwah.top</code>、<code>kinwah.wang</code>，一年几块钱，还算实惠，建站初期，优先考虑，后期有能力的时候，自己可以买服务器重新配置。</p>
<p>关于域名绑定，其实这个过程就是一个重定向的过程。</p>
<p><strong>域名解析</strong></p>
<p>以我自己的买的阿里云域名后台为例子：</p>
<p>登录后，进入控制台，按照下图所示进入域名解析列表。<br><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/47439730.jpg" alt=""></p>
<p>选择你要绑定的域名，并点击解析：<br><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/39710419.jpg" alt=""></p>
<p>主要需要修改的信息，就是下面几点：</p>
<ol>
<li>记录类型选择 <font color="#ff4081">CNAME</font><ul>
<li>主机记录填 <font color="#ff4081">www</font></li>
<li>解析线路选择默认</li>
<li>记录值填 <font color="#ff4081">yourname.github.io</font></li>
<li><font color="#ff4081">TTL</font> 值为10分钟</li>
</ul>
</li>
<li>记录类型选择 <font color="#ff4081">A</font><ul>
<li>主机记录填 <font color="#ff4081">@</font></li>
<li>解析线路选择默认</li>
<li>记录值填你<font color="#ff4081">GitHub</font> 的ip地址：</li>
<li><code>ping kinwah.github.io #通过终端ping 反馈地址的ip</code></li>
<li><font color="#ff4081">TTL</font> 值为10分钟</li>
</ul>
</li>
</ol>
<p>点击保存，这个时候，解析已经成功，但是还不能访问，因为我们还需要一个<code>CNAME</code>文本文件，<code>CNAME</code>文本文件里面只能添加我们的域名，不用加前缀<code>http://</code>，只需要写域名就好。</p>
<p><code>www.kinwah.top</code>添加好自己的域名，保存（再次注意，没有扩展名文件）</p>
<p>在我们私人博客所在的Github仓库项目根目录里面添加<code>CNAME</code>文本文件，我们的私人域名才能重新定向，正常访问。</p>
<p>由于hexo的一些机制问题，导致每次<code>hexo deploy</code>部署后，<code>CNAME</code>都会消失重建，虽然解决办法很多，为了方便，直接用最推荐的办法。</p>
<p><strong>推荐小Tips：</strong>把需要上传部署的内容，放在根目录的source文件夹里，例如<code>CNAME</code>、<code>images</code>、<code>favicon.ico</code>等，这样在进行<code>hexo d</code>部署之后，这些文件就不再会被删除了。</p>
<p><strong>以上，博客整体部署，私人域名访问，基本上全部完成了！！！</strong></p>
<hr>
<h2 id="Hexo-常用操作"><a href="#Hexo-常用操作" class="headerlink" title="Hexo 常用操作"></a><font color="#3f51b5">Hexo 常用操作</font></h2><blockquote>
<p>下面，主要列举一些Hexo的常用指令和操作，让你的指尖之旅更加愉悦高效。</p>
</blockquote>
<p><strong>发表文章</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;标题&quot;	#发表新文章</div></pre></td></tr></table></figure>
<p>可以在博客更目录下：<code>source\_posts</code>文件夹里看到自己建立的<code>标题.md</code>的Markdown文件，点击进去可以进行你的内容创造。</p>
<p>除此之外，还可以直接在<code>source\_posts</code>文件夹里直接创建新的Markdown文件，效果也是差不多的。</p>
<p>编辑好文章好，就是常用的操作了，这个操作几乎是你每次写完文章的必备指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean 	#类似清除缓存</div><div class="line">hexo d -g 	#新建html并重新部署</div></pre></td></tr></table></figure>
<p><strong>显示阅读全文</strong></p>
<p>进入自己博客首页的时候，博文不想全文显示的时候，可以添加<code>&lt;!-- more --&gt;</code>指令，在你想显示的文本最后添加这条指令，后面全部内容将会隐藏起来，然后博文列表里会出现<code>阅读全文</code>的字样。</p>
<p>除了这个人为可控的办法外，还有一个自动隐藏的办法，前提是你添加了集成该功能的主题配置文件如（NexT），</p>
<p>在相关主题配置文件<code>_config.yml</code>里，找到这段代码，把<code>enable: false</code>改成<code>enable: true</code>（注意冒号后面一定要空格）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Automatically Excerpt. Not recommend.</div><div class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</div><div class="line">auto_excerpt:</div><div class="line">enable: true #修改这里</div><div class="line">length: 150  #在列表里，最多可显示的字数</div></pre></td></tr></table></figure>
<p><strong>更改主题</strong></p>
<p>Hexo官方的主题库：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<p>Hexo的流行程度，也让它的相关插件和主题都有非常多的选择，我现在只用了最为大家所推荐的<code>Next</code>主题，</p>
<p><code>Next</code>主题的官方文档：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><code>精于心，简于形</code></p>
<p>全中文的放心阅读，好好看一下，非常简单易懂，5分钟就能搞定。</p>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-2/64723002.jpg" alt=""></p>
<p><strong>Next 主题美化和性能优化</strong></p>
<blockquote>
<p>由于我用的是<code>Next</code>主题，所以这里的美化和优化主要围绕<code>Next</code>主题。</p>
</blockquote>
<p>参考教程：<a href="http://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="external">http://www.jianshu.com/p/f054333ac9e6</a></p>
<p>这个教程里有三十种常见的炫酷效果，实在太多了，就不一一在列表里列举了，</p>
<p>推荐几个比较常见的：</p>
<p><code>添加RSS</code>、<code>添加动态背景</code>、<code>侧边栏社交小图标设置</code>、<code>在网站底部加上访问量</code>、<code>设置网站的图标Favicon</code>、<code>实现统计功能</code>。</p>
<p>剩下的，大家看自己需求，参考教程添加就好。每次修改好主题，都可以使用<code>hexo s</code>本地预览观看，再决定是否部署。</p>
<p><strong>如何更改内容区域的宽度？</strong></p>
<p>这是一个比较常见的问题，貌似很多人都迫切想解决，博客的主题左右留白太多，想让内容充实一点，不要太多空白。</p>
<p><code>Next</code>主题集成了三种样式，修改方式如下：</p>
<ol>
<li>编辑主题的 <code>next/source/css/_variables/custom.styl</code> 文件，新增变量：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 修改成你期望的宽度</div><div class="line">$content-desktop = 700px</div><div class="line"></div><div class="line">// 当视窗超过 1600px 后的宽度</div><div class="line">$content-desktop-large = 900px</div></pre></td></tr></table></figure>
<ol>
<li>如果是<code>Pisces Scheme</code>风格，需要同时修改<code>header</code>的宽度、<code>.main-inner</code>的宽度以及<code>.content-wrap</code>的宽度。编辑主题的<code>next/source/css/_schemes/Pisces/_layout.styl</code>文件，新增变量：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 用百分比设置，可以更好的适配不同的屏幕大小</div><div class="line">.header&#123; width: 80%; &#125; /* 80% */</div><div class="line">.container .main-inner &#123; width: 80%; &#125; /* 80% */</div><div class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</div></pre></td></tr></table></figure>
<p>另外，开了背景动画的朋友，如果觉得网站打开速度太慢，不妨试着关闭掉它来提高整体访问速度，让读者更舒心：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Canvas-nest</div><div class="line">canvas_nest: false</div><div class="line"></div><div class="line"># three_waves</div><div class="line">three_waves: false</div></pre></td></tr></table></figure>
<blockquote>
<p>其实还有很多更细节的操作和使用技巧，这里就不一一列举了，大家可以使用过程中慢慢发现！</p>
</blockquote>
<hr>
<h2 id="学习并适应用-Markdown-写文章"><a href="#学习并适应用-Markdown-写文章" class="headerlink" title="学习并适应用 Markdown 写文章"></a><font color="#3f51b5">学习并适应用 Markdown 写文章</font></h2><blockquote>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
</blockquote>
<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-2/35335342.jpg" alt=""></p>
<p><strong>使用Markdown的优点：</strong></p>
<ul>
<li>专注你的文字内容而不是排版样式，安心写作。</li>
<li>轻松的到处HTML、PDF和本身的.md文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li>
<li>可读、直观、学习成本低。</li>
</ul>
<p><strong>使用 Markdown 的误区</strong> </p>
<blockquote>
<p>We believe that writing is about content, about what you want to say – not about fancy formatting. </p>
<p>我们坚信写作写的是内容，所思所想，而不是花样格式。</p>
<p>— Ulysses for Mac</p>
</blockquote>
<p><strong>工具的选择</strong></p>
<p>更多的，Markdown是macOS用户用的比较多，所以macOS上的软件会比Win下全面很多。下面列举一下两个系统下推荐的软件：</p>
<ol>
<li>macOS：（只说我觉得比较好用和推荐的）<ul>
<li>Mou</li>
<li>MacDown（我正在用）</li>
<li>Ulysses for Mac</li>
</ul>
</li>
<li>Win：（这方面涉猎不深，只知道这两个）<ul>
<li>MarkdownPad</li>
<li>MarkPad</li>
</ul>
</li>
<li>Web端：<ul>
<li>简书：<a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a></li>
<li>马克飞象：<a href="https://maxiang.io" target="_blank" rel="external">https://maxiang.io</a></li>
<li>作业部落：<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">https://www.zybuluo.com/mdeditor</a></li>
</ul>
</li>
</ol>
<p><strong>基本语法和操作</strong></p>
<p>一般下载完软件，都会有个官方文档，里面会有很详尽的基本语法操作，跟着敲一遍基本就能熟悉了解了。</p>
<p>基本就是：</p>
<p><code>标题（#）</code>、<code>列表（-，*，1.）</code>、<code>引用（&gt;）</code>、<code>图片（&#39;![](){ImgCap}{/ImgCap}&#39;）</code>、</p>
<p><code>链接（&#39;[]()&#39;）</code>、<code>分割线（***）</code>、<code>代码框（Tab）</code>、<code>粗体与斜体（**粗体**/*斜体*）</code></p>
<p>想要更详细的参考推荐，可以看看这个教程：<a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">http://www.jianshu.com/p/1e402922ee32/</a></p>
<p><strong>图床选择</strong></p>
<p>关于博客里面的图床问题，以前写论坛文章的时候，一般都是传到论坛里面，现在自己写博客，还真的为外链图片发愁好久。最后找了好久，终于找到了我觉得很不错的方案：<a href="https://jiantuku.com/#/" target="_blank" rel="external">七牛空间 &amp; 极简图床 &amp; chrome插件</a>，搭配使用。新人注册，七牛云有10G免费空间，每个月10G流量，存放我们博客里面的小截图，绰绰有余啦，最重要是极简图床搭配使用真的很高效，直接拖拽生成Markdown链接，然后粘贴到文章里面就好，方便快捷！！</p>
<p><em>私以为，Markdown是最适合前端使用写作工具，可以结合HTML标记语言进行写作，还可以添加样式，赏心悦目，所见所得才是他最大的优势。我也算是第一次用Markdown来写文字，算是一边学习，一边写作的状态。还有很多语法需要去熟悉，不过通过写这篇文章，基本也把一些日常常用的语法熟悉了一遍。</em></p>
<blockquote>
<p>写完这篇文章，别问我经历了什么，只有一个<code>捂脸</code>表情包!</p>
</blockquote>
<hr>
<h2 id="还看什么别人的博客？赶紧动手去搭建自己的博客去！"><a href="#还看什么别人的博客？赶紧动手去搭建自己的博客去！" class="headerlink" title="还看什么别人的博客？赶紧动手去搭建自己的博客去！"></a><font color="#3f51b5">还看什么别人的博客？赶紧动手去搭建自己的博客去！</font></h2><blockquote>
<p>有时候，你不尝试，还真不知道自己行不行。</p>
</blockquote>
<p>关于为什么用Hexo+Github建站，其实还有很多建站系统供我们使用，如：<code>WordPress+服务器</code>、<code>Github+jekyll</code>、<code>......</code>。</p>
<p>当然，Hexo + Github Pages 有优点也有缺点：</p>
<p><strong>优点</strong></p>
<ul>
<li>轻量、高效</li>
<li>部署方便、降低建站成本</li>
<li>无需服务器，Github自带300M空间</li>
<li>用Markdown编写文章</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>静态博客，没有数据库管理内容</li>
<li>需用第三方评论工具</li>
<li>入手简单，上手不易，没一定代码基础没办法深入修改 </li>
</ul>
<p>或许初衷就和很多人一样，因为它：<strong>简单高效，实用可靠</strong>。</p>
<hr>
<p>学习前端这么久了，一直嚷着要建个博客来记录自己的学习轨迹（其实就是装装），时间一天一天过，想过的却没去做；拖拖拉拉这么久，总算是建了个站，花了半天时间整理和回顾，写出来了第一篇文章，总算是给自己一个交代了。文章虽然不完美，但也算完整，是一个好的开始，什么事都应该有始有终，愿坚持创作，记录每一个开始，好让我能回顾每一个终止。</p>
<blockquote>
<p>不为谁而做的歌，不为谁而写的诗，不为谁而码的字，而为自己的思想灵魂有个安放的居所。</p>
</blockquote>
<p><strong>如果你有用心，相信你也可以。</strong></p>
<font color="#ff4081">动起来，记录指尖，敲击之美。</font>

<p><img src="http://ovl5r0omj.bkt.clouddn.com//17-9-1/58517498.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：学习前端也有好些日子了，看到知乎或者掘金等平台上的前端大神们都有自己的私人博客，想起以前经常混迹的网易博客，突然萌发了搭建一个私人博客的想法。当然，写博客不是为了写而写，更多的是记录自己的学习和思维轨迹，同时也算是一个回顾和反思的地方，于是就有了这篇伪教程。&lt;/p&gt;
&lt;p&gt;——&lt;em&gt;不为谁而做的歌，不为谁而写的诗，不为谁而码的字，而为自己的思想灵魂有个安放的居所。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;趁着有空，参照了网上很多篇的教程，把自己用Hexo+Github搭建博客的过程记录了一番：&lt;/p&gt;
&lt;p&gt;我的博客地址：&lt;a href=&quot;http://kinwah.top&quot;&gt;http://kinwah.top&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://KinWah.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="博客" scheme="http://KinWah.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://KinWah.top/tags/Hexo/"/>
    
      <category term="Github" scheme="http://KinWah.top/tags/Github/"/>
    
  </entry>
  
</feed>
